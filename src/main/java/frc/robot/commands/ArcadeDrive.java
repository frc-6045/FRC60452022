// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import javax.xml.crypto.dsig.SignedInfo;
import edu.wpi.first.wpilibj.ADIS16470_IMU;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.subsystems.DriveTrain;

public class ArcadeDrive extends CommandBase {

        private final DriveTrain m_driveTrain;
        private Joystick singleJoy;
        private double driveScale;

    public ArcadeDrive(DriveTrain subsystem, Joystick main) {

        m_driveTrain = subsystem;
        addRequirements(m_driveTrain);
        singleJoy = main;
        
}

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
     
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {   
        driveScale = ((1 + singleJoy.getRawAxis(3) * -1) * 0.5) ;    
        m_driveTrain.my_ArcadeDrive(singleJoy.getY() * Constants.ArcadeDriveSpeed * driveScale, singleJoy.getX() * Constants.ArcadeDriveSpeed * driveScale);
      /*  double turningValue = (Constants.kAngleSetPoint -RobotContainer.gyro.getAngle()) * Constants.kP;
        turningValue = Math.copySign(turningValue, singleJoy.getY());
       m_driveTrain.getDifferentialDrive().arcadeDrive(singleJoy.getX() * .6, turningValue);
       System.out.println(RobotContainer.gyro.getAngle()); */
       
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_driveTrain.getDifferentialDrive().arcadeDrive(0, 0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
