// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.VictorSP;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.AnalogInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends SubsystemBase {
private WPI_VictorSPX intakeSpinMotor;
private VictorSP intakeRaiseMotor;
private WPI_VictorSPX intakeConveyorMotor;
private AnalogInput topConveyorSensor;
private AnalogInput bottomConveyorSensor;
private MotorControllerGroup intakeControllerGroup;

public WPI_VictorSPX getSpinIntake() {return intakeSpinMotor;}
public VictorSP getActuateIntake() {return intakeRaiseMotor;}
public WPI_VictorSPX getConveyIntake(){return intakeConveyorMotor;}
public MotorControllerGroup getIntakeControllerGroup(){ return intakeControllerGroup; }

    
    /**
    *
    */
    public Intake() {
intakeSpinMotor = new WPI_VictorSPX(Constants.intakeSpinID);

intakeRaiseMotor = new VictorSP(Constants.intakeRaiseID);

intakeConveyorMotor = new WPI_VictorSPX(Constants.conveyorID);
 
topConveyorSensor = new AnalogInput(0);
 addChild("TopConveyorSensor", topConveyorSensor);
 
bottomConveyorSensor = new AnalogInput(1);
 addChild("BottomConveyorSensor", bottomConveyorSensor);
 
 intakeControllerGroup = new MotorControllerGroup(intakeSpinMotor, intakeConveyorMotor);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

